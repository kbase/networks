storename  = db1-networks-pdev


########################################
# c3po
########################################

c3po.setDriverClass = com.mysql.jdbc.Driver
c3po.setJdbcUrl = jdbc:mysql://db1.chicago.kbase.us:3306/ppi_dev
c3po.setUser = ppi_dev
c3po.setMaxStatements = 180
c3po.setMaxStatementsPerConnection = 10
c3po.setIdleConnectionTestPeriod = 240
c3po.setPreferredTestQuery = SELECT 1

########################################
# basic properties
########################################

Edge2NodeType1.PROTEIN = PROTEIN
Edge2NodeType2.PROTEIN = PROTEIN
Edge2NodeType2.CLUSTER = PPI_COMPLEX
Default.EdgeTypes = PROTEIN_PROTEIN
Supported.EdgeTypes = PROTEIN_PROTEIN:PROTEIN_CLUSTER


########################################
# loadDatasets method
########################################

# Example
#  "id" : "kb|netdataset.mak.1",
#  "name" : "MAKv1.0 Shewanella dataset",
#  "description" : "Shewanella dataset",
#  "networkType" : "REGULATORY_NETWORK",
#  "sourceReference" : "MAK_BICLUSTER",
#  "taxons" : "kb|g.20848" ,

# Previous
#	select id from interaction_dataset
#	select description, data_source, data_url from interaction_dataset where id=?
#	select distinct(substring_index(f.feature_id,'.',2)) from interaction_protein f, interaction i where f.interaction_id=i.id and i.interaction_dataset_id=

SQL.loadDatasets = \
	select \
		concat("kb|netdataset.ppi.",d.id) as DATASET_ID \
		, description as DATASET_NAME \ 
		, concat( "PPI network: ", d.description) as DATASET_DESCRIPTION \
		, "PROT_PROT_INTERACTION" as DATASET_NETWORKTYPE \
		, CASE d.data_source WHEN "MO" THEN "MO" WHEN "EcoCyc" THEN 'ECOCYC'  ELSE "PPI" END as DATASET_SOURCEREFERENCE \
		, group_concat(g.genome_id separator ":") as DATASET_TAXONS \
# Other properties; will implement it later		
#		, d.id as interaction_dataset_id \
#		, d.data_url as url		
	from \
		interaction_dataset d \  
		join interaction_dataset_genome g \
		on (g.interaction_dataset_id = d.id) group by d.id;

########################################
# getDatasets methods
########################################

# search by PROTEIN entity id

# Previous
# select distinct(i.interaction_dataset_id) from interaction i, interaction_protein f where f.interaction_id=i.id and f.feature_id=?
 
SQL.getDatasets.PROTEIN = \
	select \  
		distinct concat("kb|netdataset.ppi.", i.interaction_dataset_id)  \  
	from \
		interaction i \
		join interaction_protein f on  f.interaction_id=i.id \ 		
	where \ 
		f.protein_id=? 
	
QIndex.ProteinId.getDatasets.PROTEIN = 1
RSIndex.DatasetId.getDatasets.PROTEIN = 1


# search by PPI_COMPLEX entity id

SQL.getDatasets.PPI_COMPLEX = \
	select \  
		distinct concat("kb|netdataset.ppi.", i.interaction_dataset_id)  \  
	from \
		interaction i \
		join interaction_protein f on  f.interaction_id=i.id \ 		
	where \ 
		i.id = substring_index(?, ".", -1)
	
QIndex.PPIComplexId.getDatasets.PPI_COMPLEX = 1
RSIndex.DatasetId.getDatasets.PPI_COMPLEX = 1

########################################
# buildFirstNeighborNetwork methods
########################################

#PROTEIN_PROTEIN edge type, search by PROTEIN entity id

# Previous
# select i.id, f1.feature_id, f1.id from interaction i, interaction_protein f1, interaction_protein f2 where i.interaction_dataset_id=? and f1.interaction_id=i.id and f2.interaction_id=i.id and f2.feature_id=? order by i.id asc, f1.rank asc

SQL.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = \
	select \
		f1.protein_id  \
		, f2.protein_id \ 
		, IF ((f1.rank < f2.rank), \
		  concat(f1.protein_id, "_", f2.protein_id),  \
		  concat(f2.protein_id, "_", f1.protein_id)) \
		, IF ((i.is_directional=0), 0, \
		    IF ((f1.rank < f2.rank), 1, -1)) \
		, i.confidence \
		, f2.strength \
# Other properties
		, i.description as description \
		, i.data_url as url \
		, m.description as detection_method \
		, i.citation_id as citation_id \
		, f1.stoichiometry as stoichiometry1 \
		, f2.stoichiometry as stoichiometry2 \
		, f1.rank as rank1 \
		, f2.rank as rank2 \
		, i.is_directional \
#		, i.id \	
	from  \
		interaction i \
		join interaction_protein f1 on f1.interaction_id = i.id  \
		join interaction_protein f2 on f2.interaction_id = i.id \  
		left join interaction_detection_type m on m.id = i.detection_method_id \		
	where \
		i.interaction_dataset_id = substring_index(?, ".", -1) \
		and f1.protein_id=?
	
QIndex.DatasetId.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = 1
QIndex.ProteinId.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = 2
RSIndex.EntityId1.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = 1
RSIndex.EntityId2.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = 2
RSIndex.EdgeName.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = 3
RSIndex.EdgeDirected.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = 4
RSIndex.Confidence.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = 5
RSIndex.Weight.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = 6
RSName.EdgeProperties.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = description:url:citation_id:detection_method:is_directional
RSName.Node1Properties.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = stoichiometry1:rank1
RSName.Node2Properties.buildFirstNeighborNetwork.PROTEIN_PROTEIN.PROTEIN = stoichiometry2:rank2




#PROTEIN_PPI_COMPLEX edge type, search by PROTEIN entity id

# Previous
#   select i.id, f.id from interaction i, interaction_protein f where i.interaction_dataset_id=? and f.interaction_id=i.id and f.feature_id=?
#	select i.interaction_dataset_id, i.description, i.is_directional, i.confidence, m.description, i.data_url, i.citation_id, f.stoichiometry, f.strength, f.rank, i.id from interaction_protein f, interaction i left join interaction_detection_type m on m.id=i.detection_method_id where f.interaction_id=i.id and f.id=

SQL.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = \
	select \
		f.protein_id \
		, concat("complex ", i.description) \
		, concat("complex ", i.description, "_", f.protein_id) \
		, -1 \
		, f.strength \
		, i.confidence \
# Other properties	
		, i.description as description \
		, i.data_url as url \
		, m.description as detection_method \
		, i.citation_id as citation_id \
		, f.stoichiometry \
		, f.rank \
		, i.interaction_dataset_id \
		, i.id as interaction_id \
		, i.is_directional \
#		, i.id \
	from \
		interaction i \
		join interaction_protein f on f.interaction_id=i.id \
		left join interaction_detection_type m on m.id=i.detection_method_id \
	 where \
		i.interaction_dataset_id = substring_index(?, ".", -1) \
		and f.protein_id=?
									 
QIndex.DatasetId.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = 1
QIndex.ProteinId.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = 2
RSIndex.EntityId1.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = 1
RSIndex.EntityId2.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = 2
RSIndex.EdgeName.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = 3
RSIndex.EdgeDirected.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = 4
RSIndex.Weight.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = 5
RSIndex.Confidence.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = 6
RSName.EdgeProperties.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = description:url:citation_id:detection_method:interaction_id:interaction_dataset_id:stoichiometry:rank:is_directional
RSName.Node1Properties.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = stoichiometry:rank
RSName.Node2Properties.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PROTEIN = description:url:citation_id:detection_method:interaction_id:interaction_dataset_id



#PROTEIN_PPI_COMPLEX edge type, search by PPI_COMPLEX entity id

SQL.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = \
	select \
		f.protein_id \
		, concat("kb|ppi.", i.id) \
		, "Member of PPI complex" \
		, -1 \
		, f.strength \
		, i.confidence \
# Other properties	
		, i.description as description \
		, i.data_url as url \
		, m.description as detection_method \
		, i.citation_id as citation_id \
		, f.stoichiometry \
		, f.rank \
		, i.interaction_dataset_id \
		, i.id as interaction_id \
		, i.is_directional \
#		, i.id
	from \
		interaction i \
		join interaction_protein f on f.interaction_id=i.id \
		left join interaction_detection_type m on m.id=i.detection_method_id \
	 where \
		i.interaction_dataset_id = substring_index(?, ".", -1) \
		and i.id = substring_index(?, ".", -1)

QIndex.DatasetId.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = 1
QIndex.PPIComplexId.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = 2
RSIndex.EntityId1.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = 1
RSIndex.EntityId2.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = 2
RSIndex.EdgeName.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = 3
RSIndex.EdgeDirected.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = 4
RSIndex.Weight.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = 5
RSIndex.Confidence.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = 6
RSName.EdgeProperties.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = description:url:citation_id:detection_method:interaction_id:interaction_dataset_id:stoichiometry:rank:is_directional
RSName.Node1Properties.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = stoichiometry:rank
RSName.Node2Properties.buildFirstNeighborNetwork.PROTEIN_PPI_COMPLEX.PPI_COMPLEX = description:url:citation_id:detection_method:interaction_id:interaction_dataset_id


########################################
# buildInternalNetwork methods
########################################

#PROTEIN_PROTEIN edge type, search by PROTEIN entity ids

SQL.buildInternalNetwork.PROTEIN_PROTEIN = \
	select \
		f1.protein_id  \
		, f2.protein_id \ 
		, IF ((f1.rank < f2.rank), \
		  concat(f1.protein_id, "_", f2.protein_id),  \
		  concat(f2.protein_id, "_", f1.protein_id)) \
		, IF ((i.is_directional=0), 0, \
		    IF ((f1.rank < f2.rank), 1, -1)) \
		, i.confidence \
		, f2.strength \
# Other properties
		, i.description as description \
		, i.data_url as url \
		, m.description as detection_method \
		, i.citation_id as citation_id \
		, f1.stoichiometry as stoichiometry1 \
		, f2.stoichiometry as stoichiometry2 \
		, f1.rank as rank1 \
		, f2.rank as rank2 \
		, i.is_directional \
#		, i.id \	
	from  \
		interaction i \
		join interaction_protein f1 on f1.interaction_id = i.id  \
		join interaction_protein f2 on f2.interaction_id = i.id \  
		left join interaction_detection_type m on m.id = i.detection_method_id \		
	where \
		f1.protein_id < f2.protein_id \ 
		and i.interaction_dataset_id = substring_index(?, ".", -1) \
		and f1.protein_id in (%s) \
		and f2.protein_id in (%s) 

QIndex.DatasetId.buildInternalNetwork.PROTEIN_PROTEIN = 1
QIndex.ProteinId.buildInternalNetwork.PROTEIN_PROTEIN = 2:3
RSIndex.EntityId1.buildInternalNetwork.PROTEIN_PROTEIN = 1
RSIndex.EntityId2.buildInternalNetwork.PROTEIN_PROTEIN = 2
RSIndex.EdgeName.buildInternalNetwork.PROTEIN_PROTEIN = 3
RSIndex.EdgeDirected.buildInternalNetwork.PROTEIN_PROTEIN = 4
RSIndex.Confidence.buildInternalNetwork.PROTEIN_PROTEIN = 5
RSIndex.Weight.buildInternalNetwork.PROTEIN_PROTEIN = 6
RSName.EdgeProperties.buildInternalNetwork.PROTEIN_PROTEIN = description:url:citation_id:detection_method:is_directional
RSName.Node1Properties.buildInternalNetwork.PROTEIN_PROTEIN = stoichiometry1:rank1
RSName.Node2Properties.buildInternalNetwork.PROTEIN_PROTEIN = stoichiometry2:rank2



#PROTEIN_PPI_COMPLEX edge type, search by PROTEIN and PPI_COMPLEX entity ids

SQL.buildInternalNetwork.PROTEIN_PPI_COMPLEX = \
	select \
		f.protein_id \
		, concat("kb|ppi.", i.id) \
		, "Member of PPI complex" \
		, -1 \
		, f.strength \
		, i.confidence \
# Other properties	
		, i.description as description \
		, i.data_url as url \
		, m.description as detection_method \
		, i.citation_id as citation_id \
		, f.stoichiometry \
		, f.rank \
		, i.is_directional \
#		, i.id \
	from \
		interaction i \
		join interaction_protein f on f.interaction_id=i.id \
		left join interaction_detection_type m on m.id=i.detection_method_id \
	 where \
		i.interaction_dataset_id = substring_index(?, ".", -1) \
		and f.protein_id in(%s) \
		and concat("kb|ppi.", i.id) in(%s) 
									 
QIndex.DatasetId.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 1
QIndex.ProteinId.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 2
QIndex.PPIComplexId.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 3
RSIndex.EntityId1.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 1
RSIndex.EntityId2.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 2
RSIndex.EdgeName.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 3
RSIndex.EdgeDirected.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 4
RSIndex.Weight.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 5
RSIndex.Confidence.buildInternalNetwork.PROTEIN_PPI_COMPLEX = 6
RSName.EdgeProperties.buildInternalNetwork.PROTEIN_PPI_COMPLEX = description:url:citation_id:detection_method:is_directional:stoichiometry:rank
RSName.Node1Properties.buildInternalNetwork.PROTEIN_PPI_COMPLEX = stoichiometry:rank

