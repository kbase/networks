storename  = db4-cds

# TODO:
# 1) add TFs to network 

########################################
# c3po
########################################

c3po.setDriverClass = com.mysql.jdbc.Driver
c3po.setJdbcUrl = jdbc:mysql://db4.chicago.kbase.us:3306/kbase_sapling_v4
c3po.setUser = kbase_sapselect
c3po.setPassword = oiwn22&dmwWEe 
c3po.setMaxStatements = 180
c3po.setMaxStatementsPerConnection = 10
c3po.setIdleConnectionTestPeriod = 240
c3po.setPreferredTestQuery = SELECT 1

########################################
# basic properties
########################################

Edge2NodeType1.GENE = GENE
Edge2NodeType2.GENE = GENE
Edge2NodeType2.CLUSTER = REGULON
Default.EdgeTypes = GENE_CLUSTER
Supported.EdgeTypes = GENE_GENE:GENE_CLUSTER


########################################
# loadDatasets method
########################################

# Example
#  "id" : "kb|netdataset.mak.1",
#  "name" : "MAKv1.0 Shewanella dataset",
#  "description" : "Shewanella dataset",
#  "networkType" : "REGULATORY_NETWORK",
#  "sourceReference" : "MAK_BICLUSTER",
#  "taxons" :  "kb|g.20848:...:..." ,


#SQL.loadDatasets = \
#	select 	\
#		concat("kb|netdataset.regprecise.", rm.regulomeId) as DATASET_ID \ 
#		, gm.name as DATASET_NAME \
#		, concat("Regulome of the ", gm.name, " genome") as DATASET_DESCRIPTION \ 
#		, "REGULATORY_NETWORK" as DATASET_NETWORKTYPE \
#		, "REGPRECISE" as DATASET_SOURCEREFERENCE \
#		, gm.kbaseId as DATASET_TAXONS \
#	from Regulome rm \
#		join  Genome gm using(genomeId)  \
#		join (select distinct regulomeId from Regulome2Regulon) t using (regulomeId) \
#	where \
#		gm.kbaseId is not null

SQL.loadDatasets = \
select \ 
	r.id as DATASET_ID \ 
	, r.id as DATASET_NAME \
	, r.description as DATASET_DESCRIPTION \ 
	, "REGULATORY_NETWORK" as DATASET_NETWORKTYPE \  
	, s.id as DATASET_SOURCEREFERENCE \
	, rhs.to_link as DATASET_TAXONS \
from Regulome r \
	join RegulomeSource rs on rs.from_link = r.id \
	join Source s on rs.to_link = s.id \
	join RegulomeHasGenome rhs on rhs.from_link = r.id \
order by DATASET_ID



########################################
# getDatasets methods
########################################

# search by GENE entity id
 
# Previous:
#SQL.getDatasets.GENE = \
#	select \
#		distinct concat("kb|netdataset.regprecise.", rm.regulomeId) \
#	from \
#		Gene g \
#		join Regulome2Regulon rm using(regulonId) \
#	where \
#		g.isRegulated = 1 \
#		and g.kbaseId = ?


SQL.getDatasets.GENE = \
select \
	distinct rhs.from_link as regulomeId \
from \
	RegulomeHasRegulon rhs \ 
	join RegulonHasOperon rho on rho.from_link = rhs.to_link \
	join IsInOperon iio on iio.to_link = rho.to_link \
where \ 
	iio.from_link = ? 
	
QIndex.GeneId.getDatasets.GENE = 1
RSIndex.DatasetId.getDatasets.GENE = 1

# search by REGULON entity id

# Previous:
#SQL.getDatasets.REGULON = \
#	select distinct  \
#		concat("kb|netdataset.regprecise.", rm.regulomeId) \
#	from \
#		Regulon r \
#		join Regulome2Regulon rm using(regulonId) \
#	where \
#		r.kbaseId = ?

SQL.getDatasets.REGULON = \		
select \
	distinct rhs.from_link as regulomeId \
from \ 
	RegulomeHasRegulon rhs \ 
where \
	rhs.to_link = ?
	 
QIndex.RegulonId.getDatasets.REGULON = 1
RSIndex.DatasetId.getDatasets.REGULON = 1


########################################
# buildFirstNeighborNetwork methods
########################################

#GENE_GENE edge type, search by GENE entity id

#SQL.buildFirstNeighborNetwork.GENE_GENE.GENE = \
#	select \
#		  g1.kbaseId \
#		, g2.kbaseId \
#		, if(g1.name is not null, g1.name, g1.locusTag) \
#		, if(g2.name is not null, g2.name, g2.locusTag) \
#		, concat("Co-regulated by ", regulatorName) \		
#		, g1.locusTag as locusTag1 \
#		, g1.moId as moId1 \
#		, g2.locusTag as locusTag2 \
#		, g2.moId as moId2 \
#		, if(r.regulationTypeTermId = 201, "TF", "RNA") as regulationType \		
#	from \
#		Gene g1 \
#		join Gene g2 using(regulonId) \
#		join Regulome2Regulon rm using(regulonId) \ 
#		join Regulon using(regulonId) \
#		join Regulog r using(regulogId) \
#	where \
#		g1.isRegulated = 1 \
#		and g2.isRegulated = 1 \
#		and g1.kbaseId <> g2.kbaseId \
#		and g2.kbaseId is not null \
#		and g1.kbaseId = ? \
#		and rm.regulomeId = substring_index(?, ".", -1)
#	
#QIndex.GeneId.buildFirstNeighborNetwork.GENE_GENE.GENE = 1
#QIndex.DatasetId.buildFirstNeighborNetwork.GENE_GENE.GENE = 2
#RSIndex.EntityId1.buildFirstNeighborNetwork.GENE_GENE.GENE = 1
#RSIndex.EntityId2.buildFirstNeighborNetwork.GENE_GENE.GENE = 2
#RSIndex.NodeName1.buildFirstNeighborNetwork.GENE_GENE.GENE = 3
#RSIndex.NodeName2.buildFirstNeighborNetwork.GENE_GENE.GENE = 4
#RSIndex.EdgeName.buildFirstNeighborNetwork.GENE_GENE.GENE = 5
#RSName.Node1Properties.buildFirstNeighborNetwork.GENE_GENE.GENE = locusTag1:moId1
#RSName.Node2Properties.buildFirstNeighborNetwork.GENE_GENE.GENE = locusTag2:moId2
#RSName.EdgeProperties.buildFirstNeighborNetwork.GENE_GENE.GENE = regulationType

SQL.buildFirstNeighborNetwork.GENE_GENE.GENE = \
select \
	iio1.from_link as entityId1 \
	, iio2.from_link as entityId2 \
	, iio1.from_link as nodeName1 \
	, iio2.from_link as nodeName2 \
	, concat("Co-regulated by ", r.name) as edgeName \ 
	, r.type as regulationType \
from \
	RegulomeHasRegulon rr \
	join IsRegulatorForRegulon irfr on irfr.to_link = rr.to_link \
	join Regulator r on r.id = irfr.from_link \
	join RegulonHasOperon rho1 on rho1.from_link = rr.to_link \
	join RegulonHasOperon rho2 on rho2.from_link = rr.to_link \
	join IsInOperon iio1 on iio1.to_link = rho1.to_link \
	join IsInOperon iio2 on iio2.to_link = rho2.to_link \
where \
	iio1.from_link = ? \
	and rr.from_link = ? \
	and iio1.from_link <> iio2.from_link


QIndex.GeneId.buildFirstNeighborNetwork.GENE_GENE.GENE = 1
QIndex.DatasetId.buildFirstNeighborNetwork.GENE_GENE.GENE = 2
RSIndex.EntityId1.buildFirstNeighborNetwork.GENE_GENE.GENE = 1
RSIndex.EntityId2.buildFirstNeighborNetwork.GENE_GENE.GENE = 2
RSIndex.NodeName1.buildFirstNeighborNetwork.GENE_GENE.GENE = 3
RSIndex.NodeName2.buildFirstNeighborNetwork.GENE_GENE.GENE = 4
RSIndex.EdgeName.buildFirstNeighborNetwork.GENE_GENE.GENE = 5
#RSName.Node1Properties.buildFirstNeighborNetwork.GENE_GENE.GENE = locusTag1:moId1
#RSName.Node2Properties.buildFirstNeighborNetwork.GENE_GENE.GENE = locusTag2:moId2
RSName.EdgeProperties.buildFirstNeighborNetwork.GENE_GENE.GENE = regulationType


#GENE_REGULON edge type, search by GENE entity id

# Previous
#SQL.buildFirstNeighborNetwork.GENE_REGULON.GENE = \
#	select \
#		g.kbaseId \
#		, rn.kbaseId \
#		,if(g.name is not null, g.name, g.locusTag) \
#		,r.regulatorName \
#		,"regulated by" \
#		,1 as directed \
#	from \
#		Gene g \
#		join Regulome2Regulon rm using(regulonId) \ 
#		join Regulon rn using(regulonId) \
#		join Regulog r using(regulogId) \
#	where \
#		g.isRegulated = 1 \
#		and g.kbaseId = ? \
#		and rm.regulomeId = substring_index(?, ".", -1)
#		
#	 
#QIndex.GeneId.buildFirstNeighborNetwork.GENE_REGULON.GENE = 1
#QIndex.DatasetId.buildFirstNeighborNetwork.GENE_REGULON.GENE = 2
#RSIndex.EntityId1.buildFirstNeighborNetwork.GENE_REGULON.GENE = 1
#RSIndex.EntityId2.buildFirstNeighborNetwork.GENE_REGULON.GENE = 2
#RSIndex.NodeName1.buildFirstNeighborNetwork.GENE_REGULON.GENE = 3
#RSIndex.NodeName2.buildFirstNeighborNetwork.GENE_REGULON.GENE = 4
#RSIndex.EdgeName.buildFirstNeighborNetwork.GENE_REGULON.GENE = 5
#RSIndex.EdgeDirected.buildFirstNeighborNetwork.GENE_REGULON.GENE = 6


SQL.buildFirstNeighborNetwork.GENE_REGULON.GENE = \
select \
	iio1.from_link as entityId1 \
	, rn.id as entityId2 \
	, iio1.from_link as nodeName1 \
	, concat(r.name, " regulon") as nodeName2 \
	, "regulated by "as edgeName \
	, 1 as directed \
from \
	RegulomeHasRegulon rr \
	join Regulon rn on rn.id = rr.to_link \
	join IsRegulatorForRegulon irfr on irfr.to_link = rr.to_link \
	join Regulator r on r.id = irfr.from_link \
	join RegulonHasOperon rho1 on rho1.from_link = rr.to_link \
	join IsInOperon iio1 on iio1.to_link = rho1.to_link \
where \
	iio1.from_link = ? \
	and rr.from_link = ?

QIndex.GeneId.buildFirstNeighborNetwork.GENE_REGULON.GENE = 1
QIndex.DatasetId.buildFirstNeighborNetwork.GENE_REGULON.GENE = 2
RSIndex.EntityId1.buildFirstNeighborNetwork.GENE_REGULON.GENE = 1
RSIndex.EntityId2.buildFirstNeighborNetwork.GENE_REGULON.GENE = 2
RSIndex.NodeName1.buildFirstNeighborNetwork.GENE_REGULON.GENE = 3
RSIndex.NodeName2.buildFirstNeighborNetwork.GENE_REGULON.GENE = 4
RSIndex.EdgeName.buildFirstNeighborNetwork.GENE_REGULON.GENE = 5
RSIndex.EdgeDirected.buildFirstNeighborNetwork.GENE_REGULON.GENE = 6


#GENE_REGULON edge type, search by REGULON entity id

#SQL.buildFirstNeighborNetwork.GENE_REGULON.REGULON = \
#	select \
#		g.kbaseId \
#		, rn.kbaseId \
#		, if(g.name is not null, g.name, g.locusTag) \
#		, r.regulatorName \
#		, "regulates" \
#		, -1 as directed \
#	from \
#		Gene g \
#		join Regulome2Regulon rm using(regulonId) \ 
#		join Regulon rn using(regulonId) \
#		join Regulog r using(regulogId) \
#	where \
#		g.isRegulated = 1 \
#		and g.kbaseId is not null \
#		and rn.kbaseId = ? \
#		and rm.regulomeId = substring_index(?, ".", -1)
	 
#QIndex.RegulonId.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 1
#QIndex.DatasetId.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 2
#RSIndex.EntityId1.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 1
#RSIndex.EntityId2.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 2
#RSIndex.NodeName1.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 3
#RSIndex.NodeName2.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 4
#RSIndex.EdgeName.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 5
#RSIndex.EdgeDirected.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 6

SQL.buildFirstNeighborNetwork.GENE_REGULON.REGULON = \
select \
	iio1.from_link as entityId1 \
	, rn.id as entityId2 \
	, iio1.from_link as nodeName1 \
	, concat(r.name, " regulon") as nodeName2 \
	, "regulated by "as edgeName \
	, 1 as directed \
from \
	RegulomeHasRegulon rr \
	join Regulon rn on rn.id = rr.to_link \
	join IsRegulatorForRegulon irfr on irfr.to_link = rr.to_link \
	join Regulator r on r.id = irfr.from_link \
	join RegulonHasOperon rho1 on rho1.from_link = rr.to_link \
	join IsInOperon iio1 on iio1.to_link = rho1.to_link \
where \
	rn.id = ? \ 
	and rr.from_link = ?


QIndex.RegulonId.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 1
QIndex.DatasetId.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 2
RSIndex.EntityId1.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 1
RSIndex.EntityId2.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 2
RSIndex.NodeName1.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 3
RSIndex.NodeName2.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 4
RSIndex.EdgeName.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 5
RSIndex.EdgeDirected.buildFirstNeighborNetwork.GENE_REGULON.REGULON = 6



########################################
# buildInternalNetwork methods
########################################

#GENE_GENE edge type, search by GENE entity ids

#SQL.buildInternalNetwork.GENE_GENE = \
#	select \
#		g1.kbaseId \
#		, g2.kbaseId \
#		, if(g1.name is not null, g1.name, g1.locusTag) \
#		, if(g2.name is not null, g2.name, g2.locusTag) \
# 		, concat("Co-regulated by ", regulatorName) \
#		, 0 as directed \		
#		, rn.kbaseId as regulonId \
#	from \
#		Gene g1 \
#		join Gene g2 using(regulonId) \
#		join Regulome2Regulon rm using(regulonId) \ 
#		join Regulon rn using(regulonId) \
#		join Regulog r using(regulogId) \
#	where \
#		g1.isRegulated = 1 \
#		and g2.isRegulated = 1 \
#		and g1.kbaseId < g2.kbaseId \ 
#		and g1.kbaseId in(%s) \
#		and g2.kbaseId in(%s) \
#		and rm.regulomeId = substring_index(?, ".", -1)
		
#QIndex.GeneId.buildInternalNetwork.GENE_GENE = 1:2
#QIndex.DatasetId.buildInternalNetwork.GENE_GENE = 3
#RSIndex.EntityId1.buildInternalNetwork.GENE_GENE = 1
#RSIndex.EntityId2.buildInternalNetwork.GENE_GENE = 2
#RSIndex.NodeName1.buildInternalNetwork.GENE_GENE = 3
#RSIndex.NodeName2.buildInternalNetwork.GENE_GENE = 4
#RSIndex.EdgeName.buildInternalNetwork.GENE_GENE = 5
#RSIndex.EdgeDirected.buildInternalNetwork.GENE_GENE = 6
#RSName.EdgeProperties.buildInternalNetwork.GENE_GENE = regulonId

SQL.buildInternalNetwork.GENE_GENE = \
select \
	iio1.from_link as entityId1 \
	, iio2.from_link as entityId2 \
	, iio1.from_link as nodeName1 \
	, iio2.from_link as nodeName2 \
	, concat("Co-regulated by ", r.name) as edgeName \ 
from \
	RegulomeHasRegulon rr \
	join IsRegulatorForRegulon irfr on irfr.to_link = rr.to_link \
	join Regulator r on r.id = irfr.from_link \
	join RegulonHasOperon rho1 on rho1.from_link = rr.to_link \
	join RegulonHasOperon rho2 on rho2.from_link = rr.to_link \
	join IsInOperon iio1 on iio1.to_link = rho1.to_link \
	join IsInOperon iio2 on iio2.to_link = rho2.to_link \
where \
	iio1.from_link in (%s) \
	and iio2.from_link in (%s) \
	and rr.from_link = ? \
	and iio1.from_link < iio2.from_link

QIndex.GeneId.buildInternalNetwork.GENE_GENE = 1:2
QIndex.DatasetId.buildInternalNetwork.GENE_GENE = 3
RSIndex.EntityId1.buildInternalNetwork.GENE_GENE = 1
RSIndex.EntityId2.buildInternalNetwork.GENE_GENE = 2
RSIndex.NodeName1.buildInternalNetwork.GENE_GENE = 3
RSIndex.NodeName2.buildInternalNetwork.GENE_GENE = 4
RSIndex.EdgeName.buildInternalNetwork.GENE_GENE = 5
#RSIndex.EdgeDirected.buildInternalNetwork.GENE_GENE = 6
#RSName.EdgeProperties.buildInternalNetwork.GENE_GENE = regulonId

#GENE_REGULON edge type, search by GENE and REGULON entity ids

#SQL.buildInternalNetwork.GENE_REGULON = \
#	select \
#		g.kbaseId \
#		, rn.kbaseId \
#		, if(g.name is not null, g.name, g.locusTag) \
#		, r.regulatorName \
#		, "regulates" \
#		, -1 as directed \
#	from \
#		Gene g \
#		join Regulome2Regulon rm using(regulonId) \ 
#		join Regulon rn using(regulonId) \
#		join Regulog r using(regulogId) \
#	where \
#		g.isRegulated = 1 \
#		and g.kbaseId in(%s) \
#		and rn.kbaseId in(%s) \
#		and rm.regulomeId = substring_index(?, ".", -1)
			
#QIndex.GeneId.buildInternalNetwork.GENE_REGULON = 1
#QIndex.RegulonId.buildInternalNetwork.GENE_REGULON = 2
#QIndex.DatasetId.buildInternalNetwork.GENE_REGULON = 3
#RSIndex.EntityId1.buildInternalNetwork.GENE_REGULON = 1
#RSIndex.EntityId2.buildInternalNetwork.GENE_REGULON = 2
#RSIndex.NodeName1.buildInternalNetwork.GENE_REGULON = 3
#RSIndex.NodeName2.buildInternalNetwork.GENE_REGULON = 4
#RSIndex.EdgeName.buildInternalNetwork.GENE_REGULON = 5
#RSIndex.EdgeDirected.buildInternalNetwork.GENE_REGULON = 6

SQL.buildInternalNetwork.GENE_REGULON = \
select \  
	iio1.from_link as entityId1 \
	, rn.id as entityId2 \
	, iio1.from_link as nodeName1 \
	, concat(r.name, " regulon") as nodeName2 \
	, "regulated by "as edgeName \
	, 1 as directed \
from \
	RegulomeHasRegulon rr \
	join Regulon rn on rn.id = rr.to_link \
	join IsRegulatorForRegulon irfr on irfr.to_link = rr.to_link \
	join Regulator r on r.id = irfr.from_link \
	join RegulonHasOperon rho1 on rho1.from_link = rr.to_link \
	join IsInOperon iio1 on iio1.to_link = rho1.to_link \
where \
	iio1.from_link in (%s) \
	and rn.id in (%s) \
	and rr.from_link = ?

QIndex.GeneId.buildInternalNetwork.GENE_REGULON = 1
QIndex.RegulonId.buildInternalNetwork.GENE_REGULON = 2
QIndex.DatasetId.buildInternalNetwork.GENE_REGULON = 3
RSIndex.EntityId1.buildInternalNetwork.GENE_REGULON = 1
RSIndex.EntityId2.buildInternalNetwork.GENE_REGULON = 2
RSIndex.NodeName1.buildInternalNetwork.GENE_REGULON = 3
RSIndex.NodeName2.buildInternalNetwork.GENE_REGULON = 4
RSIndex.EdgeName.buildInternalNetwork.GENE_REGULON = 5
RSIndex.EdgeDirected.buildInternalNetwork.GENE_REGULON = 6


########################################
# buildNetwork methods
########################################

#GENE_GENE edge type, search by REGULOME id


SQL.buildNetwork.GENE_GENE = \
select \
	iio1.from_link as entityId1 \
	, iio2.from_link as entityId2 \
	, iio1.from_link as nodeName1 \
	, iio2.from_link as nodeName2 \
	, concat("Co-regulated by ", r.name) as edgeName \ 
from \
	RegulomeHasRegulon rr \
	join IsRegulatorForRegulon irfr on irfr.to_link = rr.to_link \
	join Regulator r on r.id = irfr.from_link \
	join RegulonHasOperon rho1 on rho1.from_link = rr.to_link \
	join RegulonHasOperon rho2 on rho2.from_link = rr.to_link \
	join IsInOperon iio1 on iio1.to_link = rho1.to_link \
	join IsInOperon iio2 on iio2.to_link = rho2.to_link \
where \
	rr.from_link = ? \
	iio1.from_link < iio2.from_link

QIndex.DatasetId.buildNetwork.GENE_GENE = 1
RSIndex.EntityId1.buildNetwork.GENE_GENE = 1
RSIndex.EntityId2.buildNetwork.GENE_GENE = 2
RSIndex.NodeName1.buildNetwork.GENE_GENE = 3
RSIndex.NodeName2.buildNetwork.GENE_GENE = 4
RSIndex.EdgeName.buildNetwork.GENE_GENE = 5

#GENE_REGULONE edge type, search by REGULOME id

SQL.buildNetwork.GENE_REGULON = \
select \ 
	iio1.from_link as entityId1 \
	, rn.id as entityId2 \
	, iio1.from_link as nodeName1 \
	, concat(r.name, " regulon") as nodeName2 \
	, "regulated by "as edgeName \
	, 1 as directed \
from \
	RegulomeHasRegulon rr \
	join Regulon rn on rn.id = rr.to_link \
	join IsRegulatorForRegulon irfr on irfr.to_link = rr.to_link \
	join Regulator r on r.id = irfr.from_link \
	join RegulonHasOperon rho1 on rho1.from_link = rr.to_link \
	join IsInOperon iio1 on iio1.to_link = rho1.to_link \
where \
	rr.from_link = ?

QIndex.DatasetId.buildNetwork.GENE_REGULON = 1
RSIndex.EntityId1.buildNetwork.GENE_REGULON = 1
RSIndex.EntityId2.buildNetwork.GENE_REGULON = 2
RSIndex.NodeName1.buildNetwork.GENE_REGULON = 3
RSIndex.NodeName2.buildNetwork.GENE_REGULON = 4
RSIndex.EdgeName.buildNetwork.GENE_REGULON = 5
RSIndex.EdgeDirected.buildNetwork.GENE_REGULON = 6
